// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.callTranslateText_V3 = exports.callBatchTranslateText_V3 = exports.getSupportedLanguagesV3 = void 0;
// [START translate_v3_generated_TranslationService_GetSupportedLanguages_async]
/**
 * This snippet has been automatically generated and should be regarded as a code template only.
 * It will require modifications to work.
 * It may require correct/in-range values for request initialization.
 * TODO(developer): Uncomment these variables before running the sample.
 */
/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project.
 *  Format: `projects/{project-number-or-id}` or
 *  `projects/{project-number-or-id}/locations/{location-id}`.
 *  For global calls, use `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`.
 *  Non-global location is required for AutoML models.
 *  Only models within the same region (have same location-id) can be used,
 *  otherwise an INVALID_ARGUMENT (400) error is returned.
 */
/**
 *  Optional. The language to use to return localized, human readable names
 *  of supported languages. If missing, then display names are not returned
 *  in a response.
*/
// const displayLanguageCode = 'abc123'
/**
 *  Optional. Get supported languages of this model.
 *  The format depends on model type:
 *  - AutoML Translation models:
 *    `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`
 *  - General (built-in) models:
 *    `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,
 *  Returns languages supported by the specified model.
 *  If missing, we get supported languages of Google general NMT model.
*/
// const model = 'abc123'
// Imports the Translation library
const { TranslationServiceClient } = require('@google-cloud/translate').v3;
const dotenv = __importStar(require("dotenv"));
dotenv.config();
// Your credentials
const CREDENTIALS = JSON.parse(`${(_a = process.env.CREDENTIALS) === null || _a === void 0 ? void 0 : _a.toString()}`);
// Instantiates a client
const translationClient = new TranslationServiceClient({
    credentials: CREDENTIALS,
    projectId: CREDENTIALS.project_id
});
const parent = 'projects/nth-aggregator-419009';
async function getSupportedLanguagesV3() {
    // Construct request
    const request = {
        parent,
    };
    // Run request
    const response = await translationClient.getSupportedLanguages(request);
    return response[0].languages;
}
exports.getSupportedLanguagesV3 = getSupportedLanguagesV3;
/**
 * This function performs batch translation of text using the Google Cloud Translation API.
 *
 * @param {string} sourceLanguageCode The language code of the source text.
 * @param {string[]} targetLanguageCodes An array of language codes for the desired translated versions.
 * @param {InputConfig[]} inputConfigs An array of objects specifying the input text sources.
 * @param {OutputConfig} [outputConfig] An optional object specifying the output format and location (defaults to in-memory text).
 * @returns {Promise<any>} A promise that resolves with the translation response object.
 */
async function callBatchTranslateText_V3(sourceLanguageCode, targetLanguageCodes, inputConfigs, outputConfig) {
    // Construct request
    const request = {
        parent,
        sourceLanguageCode,
        targetLanguageCodes,
        inputConfigs,
        outputConfig,
    };
    // Run request
    const [operation] = await translationClient.batchTranslateText(request);
    const [response] = await operation.promise();
    console.log(response);
}
exports.callBatchTranslateText_V3 = callBatchTranslateText_V3;
async function callTranslateText_V3(contents, targetLanguageCode) {
    // Construct request
    const request = {
        contents,
        targetLanguageCode,
        parent,
    };
    // Run request
    const response = await translationClient.translateText(request);
    return response;
}
exports.callTranslateText_V3 = callTranslateText_V3;
